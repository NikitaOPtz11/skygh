// Generated by SolidPython 1.0.5 on 2021-02-19 22:11:54


union() {
	difference() {
		polyhedron(faces = [[0, 1, 2, 3], [4, 5, 1, 0], [7, 6, 5, 4], [5, 6, 2, 1], [6, 7, 3, 2], [7, 4, 0, 3]], points = [[0, 0, 0], [125, 0, 0], [125, 25, 0], [0, 25, 0], [3.5000000000, 3.5000000000, 10], [121.5000000000, 3.5000000000, 10], [121.5000000000, 21.5000000000, 10], [3.5000000000, 21.5000000000, 10]]);
		rotate(a = [70.7099537808, 0, 0]) {
			translate(v = [15.6250000000, 1.2500000000, -1]) {
				linear_extrude(height = 2) {
					scale(v = [0.0900000000, 0.0900000000, 0.0900000000]) {
						import(file = "gitlab.svg", origin = [0, 0]);
					}
				}
			}
		}
	}
	rotate(a = [70.7099537808, 0, 0]) {
		translate(v = [31.2500000000, 3.2500000000, -1]) {
			linear_extrude(height = 2) {
				text(size = 4, text = "@felixgomez");
			}
		}
	}
	rotate(a = [70.7099537808, 0, 0]) {
		translate(v = [100.0000000000, 3.2500000000, -1]) {
			linear_extrude(height = 2) {
				text(size = 5, text = "2020");
			}
		}
	}
	union() {
		translate(v = [9.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [13.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [19.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [19.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [23.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [23.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [27.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [27.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 10.0]);
		}
		translate(v = [31.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 8.181818181818182]);
		}
		translate(v = [31.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [33.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [33.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [33.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 13.636363636363637]);
		}
		translate(v = [33.5000000000, 15.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [35.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [35.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 11.818181818181818]);
		}
		translate(v = [35.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 8.181818181818182]);
		}
		translate(v = [35.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [35.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [37.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [39.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [39.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [39.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [41.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [41.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [41.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [43.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [43.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [45.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [45.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [45.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [45.5000000000, 15.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [47.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [47.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [47.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [47.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [47.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 9.090909090909092]);
		}
		translate(v = [49.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [49.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [49.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [49.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [49.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [53.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [53.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [55.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [57.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [59.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [61.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [61.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [61.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [63.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [63.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [63.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [67.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [69.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [69.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [69.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [71.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 10.0]);
		}
		translate(v = [71.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [71.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 12.727272727272727]);
		}
		translate(v = [71.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [73.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [75.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 10.0]);
		}
		translate(v = [77.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [77.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [77.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [79.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [79.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [83.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [83.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [83.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 5.454545454545454]);
		}
		translate(v = [83.5000000000, 15.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [85.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [85.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [87.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [87.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [89.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [89.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [89.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 20.0]);
		}
		translate(v = [95.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [95.5000000000, 15.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [95.5000000000, 17.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [97.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [97.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [97.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 6.363636363636363]);
		}
		translate(v = [99.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 13.636363636363637]);
		}
		translate(v = [99.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [99.5000000000, 17.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [101.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 7.2727272727272725]);
		}
		translate(v = [101.5000000000, 7.5000000000, 10]) {
			cube(size = [2, 2, 4.545454545454546]);
		}
		translate(v = [101.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
		translate(v = [105.5000000000, 9.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [105.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 8.181818181818182]);
		}
		translate(v = [107.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 9.090909090909092]);
		}
		translate(v = [107.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 10.909090909090908]);
		}
		translate(v = [107.5000000000, 13.5000000000, 10]) {
			cube(size = [2, 2, 1.8181818181818181]);
		}
		translate(v = [109.5000000000, 11.5000000000, 10]) {
			cube(size = [2, 2, 3.6363636363636362]);
		}
		translate(v = [109.5000000000, 15.5000000000, 10]) {
			cube(size = [2, 2, 2.727272727272727]);
		}
		translate(v = [113.5000000000, 5.5000000000, 10]) {
			cube(size = [2, 2, 0.9090909090909091]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#!/usr/bin/env python3

import argparse
import asyncio
import datetime
import math
import subprocess
from calendar import monthrange

import aiohttp
from bs4 import BeautifulSoup
from solid import *
from solid.utils import *
import numpy as np

__author__ = "Félix Gómez"


async def get_contributions(semaphore, username, date, contribution_matrix):
    """Get contributions directly using Gitlab activities endpoint API (asynchronously)"""
    async with aiohttp.ClientSession(raise_for_status=True) as client:
        try:
            date_as_str = date.strftime("%Y-%m-%d")
            url = 'https://gitlab.com/users/' + username + '/calendar_activities?date=' + date_as_str
            async with semaphore, client.get(url) as response:
                content = await response.text()
                soup = BeautifulSoup(content, 'html.parser')
                contribution_matrix.append(
                    [int(date.strftime('%j')), int(date.strftime('%u')) - 1, len(soup.find_all('li'))])

        except Exception as err:
            print(f"Exception occured: {err}")
            pass


def all_dates_in_year(year=2020):
    for month in range(1, 13):
        for day in range(1, monthrange(year, month)[1] + 1):
            yield datetime.datetime(year, month, day)


def parse_contribution_matrix(contribution_matrix):
    np_contribution_matrix = np.array(contribution_matrix)

    np_contribution_matrix.view('i8,i8,i8').sort(order=['f0'], axis=0)
    *_, max_contributions_by_day = np_contribution_matrix.max(axis=0)
    day_offset = np_contribution_matrix[0][1]
    year_contribution_list = np.delete(np_contribution_matrix, (0, 1), 1).flatten().tolist()

    for i in range(day_offset):
        year_contribution_list.insert(0, 0)

    return [year_contribution_list, max_contributions_by_day]


def generate_skyline_stl(username, year, contribution_matrix):
    year_contribution_list, max_contributions_by_day = parse_contribution_matrix(contribution_matrix)

    base_top_width = 18
    base_width = 25
    base_length = 125
    base_height = 10
    max_length_contributionbar = 20

    base_top_offset = (base_width - base_top_width) / 2
    face_angle = math.degrees(math.atan(base_height / base_top_offset))

    base_points = [
        [0, 0, 0],
        [base_length, 0, 0],
        [base_length, base_width, 0],
        [0, base_width, 0],
        [base_top_offset, base_top_offset, base_height],
        [base_length - base_top_offset, base_top_offset, base_height],
        [base_length - base_top_offset, base_width - base_top_offset, base_height],
        [base_top_offset, base_width - base_top_offset, base_height]
    ]

    base_faces = [
        [0, 1, 2, 3],  # bottom
        [4, 5, 1, 0],  # front
        [7, 6, 5, 4],  # top
        [5, 6, 2, 1],  # right
        [6, 7, 3, 2],  # back
        [7, 4, 0, 3]  # left
    ]

    base_scad = polyhedron(points=base_points, faces=base_faces)

    year_scad = rotate([face_angle, 0, 0])(
        translate([base_length - base_length / 5, base_height / 2 - base_top_offset / 2, -1])(
            linear_extrude(height=2)(
                text(str(year), 5)
            )
        )
    )

    user_scad = rotate([face_angle, 0, 0])(
        translate([base_length / 4, base_height / 2 - base_top_offset / 2, -1])(
            linear_extrude(height=2)(
                text("@" + username, 4)
            )
        )
    )

    logo_gitlab_scad = rotate([face_angle, 0, 0])(
        translate([base_length / 8, base_height / 2 - base_top_offset / 2 - 2, -1])(
            linear_extrude(height=2)(
                scale([0.09, 0.09, 0.09])(
                    import_stl("gitlab.svg")
                )
            )
        )
    )

    bars = None

    week_number = 1
    for i in range(len(year_contribution_list)):

        day_number = i % 7
        if day_number == 0:
            week_number += 1

        if year_contribution_list[i] == 0:
            continue

        bar = translate(
            [base_top_offset + 2 + week_number * 2, base_top_offset + 2 + day_number * 2, base_height])(
            cube([2, 2, year_contribution_list[i] * max_length_contributionbar / max_contributions_by_day])
        )

        if bars is None:
            bars = bar
        else:
            bars += bar

    scad_contributions_filename = 'gitlab_' + username + '_' + str(year)
    scad_render_to_file(base_scad - logo_gitlab_scad + user_scad + year_scad + bars,
                        scad_contributions_filename + '.scad')

    subprocess.run(['openscad', '-o', scad_contributions_filename + '.stl', scad_contributions_filename + '.scad'],
                   capture_output=True)

    print('Generated STL file ' + scad_contributions_filename +
          '.stl')


def main():
    parser = argparse.ArgumentParser(prog="gitlab_generate_stl", description='Create STL from Gitlab contributions',
                                     epilog='Enjoy!')
    parser.add_argument('username', metavar=None, type=str, help='Gitlab username (without @)')
    parser.add_argument('year', metavar=None, type=int,
                        help='Year of contributions to fetch', default=2020, nargs="?")

    parser.add_argument('max_requests', metavar=None, type=int,
                        help='Max. simultaneous request to Gitlab. Don\'t mess with their server!', default=10,
                        nargs="?")

    args = parser.parse_args()

    username = args.username
    max_requests = args.max_requests
    year = args.year
    contribution_matrix = []

    print("Fetching contributions from Gitlab...")

    semaphore = asyncio.Semaphore(max_requests)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(
        asyncio.wait(
            [get_contributions(semaphore, username, date, contribution_matrix) for date in all_dates_in_year(year)]))
    loop.close()

    print("Generating STL...")
    generate_skyline_stl(username, year, contribution_matrix)


if __name__ == '__main__':
    main()
 
 
************************************************/
